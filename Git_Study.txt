提交修改和提交新文件是一样的两步	（工作区 > 缓存区 > 版本区）
	add 到暂存区（stage（或者叫index））
	commit 提交到当前分支
	需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改


1，安装 Git

2，设置用户
	打开 Git Bash，输入：
		git config --global user.name XiaoYu
		git config --global user.email 970683504@qq.com
	--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。

3，创建版本库
	创建一个 文件夹，在文件夹中打开 Git Bash，输入：
		git init

4，添加文件到仓库
		git add filename.txt

5，提交文件到仓库
		git commit -m "提交说明"
	-m后面输入的是本次提交的说明

6，查看仓库状态
		git status

7，查看文件变化
		git diff filename.txt

8，查看提交日志
		git log		（复杂展示）
		git log --pretty=oneline	（简洁展示）

9，回退到上一个版本
		git reset --hard HEAD^
	HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

10，回退版本后回到回退之前的版本（只要上面的命令行窗口还没有被关掉）
		git reset --hard *******（commit id）

11，查看历史命令（可用来找回回退之前的文件）
		git reflog

12，查看文本文件内容
		cat filename.txt

13，撤销 工作区 的修改
		git checkout -- filename.txt
	让这个文件回到最近一次 git commit 或 git add 时的状态

14，把暂存区的修改撤销掉（unstage），重新放回工作区：
		git reset HEAD filename.txt		（git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区）
		git checkout -- filename.txt

15，删除文件
		git rm test.txt
		git commit -m "remove test.txt"

16，恢复文件
		git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”


远程仓库---关联本地仓库：
1，打开Git Bash），创建SSH Key：
		ssh-keygen -t rsa -C "youremail@example.com"
	一路回车，使用默认值
	在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

2，添加公钥到GitHub
	登陆GitHub，打开“Account settings”，“SSH Keys”页面：
	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
	Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
	GitHub允许你添加多个Key，可多个电脑提交（公司电脑、家里电脑）

3，在GitHub上创建一个远程仓库
		Create a new repository
		填写仓库名和描述
		在GitHub上的这个learngit仓库还是空的，可以从这个仓库克隆出新的仓库，
		也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
		
		复制仓库的SSH地址：git@github.com:YuYhq/GitTest.git

4，关联远程仓库与本地仓库
	在本地的learngit仓库下运行命令：
		git remote add origin git@github.com:YuYhq/GitTest.git
	第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告
	这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，
	需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
	
	远程库的名字就是origin，这是Git默认

5，把本地库的所有内容推送到远程库
		git push -u origin master	（把当前分支master推送到远程）
		
	们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
	还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样

6，把本地master分支的最新修改推送至GitHub
		git push origin master

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


远程仓库---克隆
1，登录GitHub，新建或打开一个远程仓库，找到SSH地址：
		Clone or download 下 Clone with SSH 下 git@github.com:YuYhq/GitTest.git
	
2，在本地新建一个文件夹，在文件夹中打开 Git Bash 
		git clone git@github.com:YuYhq/GitTest.git
	
	除ssh协议外，git还可用https等其他协议：https://github.com/YuYhq/GitTest.git
	https速度慢且每次推送都必须输入口令

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆






