廖雪峰的Git教程
		学习笔记


1，安装 Git
	https://git-scm.com/
	官网下载安装

2，设置用户
	打开 Git Bash，输入：
		git config --global user.name XiaoYu
		git config --global user.email 970683504@qq.com
	global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，
	当然也可以对某个仓库指定不同的用户名和Email地址。

3，创建版本库
	创建一个 文件夹，在文件夹中打开 Git Bash，输入：
		git init

4，添加文件到仓库
		git add filename.txt

5，提交文件到仓库
		git commit -m "提交说明"
	-m后面输入的是本次提交的说明

6，查看仓库状态
		git status

7，查看文件变化
		git diff filename.txt
	
	提交修改和提交新文件是一样的两步	（工作区 > 缓存区 > 版本区）
	add 到暂存区（stage（或者叫index））
	commit 提交到当前分支
	需要提交的文件修改，统统放到缓存区(add)，然后，一次性提交暂存区的所有修改(commit)

8，查看提交日志
		git log		（复杂展示）
		git log --pretty=oneline	（简洁展示）

9，回退到上一个版本
		git reset --hard HEAD^
	HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

10，回退版本后回到回退之前的版本（只要上面的命令行窗口还没有被关掉）
		git reset --hard *******（commit id）

11，查看历史命令（可用来找回回退之前的文件）
		git reflog

12，查看文本文件内容
		cat filename.txt

13，撤销 工作区 的修改
		git checkout -- filename.txt
	让这个文件回到最近一次 git commit 或 git add 时的状态

14，把暂存区的修改撤销掉（unstage），重新放回工作区：
		git reset HEAD filename.txt		（git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区）
		git checkout -- filename.txt

15，删除文件
		git rm test.txt
		git commit -m "remove test.txt"

16，恢复文件
		git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”


远程仓库---关联本地仓库：
1，打开Git Bash），创建SSH Key：
		ssh-keygen -t rsa -C "youremail@example.com"
	一路回车，使用默认值
	在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

2，添加公钥到GitHub
	登陆GitHub，打开“Account settings”，“SSH Keys”页面：
	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
	Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
	GitHub允许你添加多个Key，可多个电脑提交（公司电脑、家里电脑）

3，在GitHub上创建一个远程仓库
		Create a new repository
		填写仓库名和描述
		在GitHub上的这个learngit仓库还是空的，可以从这个仓库克隆出新的仓库，
		也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
		
		复制仓库的SSH地址：git@github.com:YuYhq/GitTest.git

4，关联远程仓库与本地仓库
	在本地的learngit仓库下运行命令：
		git remote add origin git@github.com:YuYhq/GitTest.git
	第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告
	这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，
	需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
	
	远程库的名称就是origin，这是Git默认

5，把本地库的所有内容推送到远程库
		git push -u origin master	（把当前分支master推送到远程）
		
	们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
	还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样

6，把本地master分支的最新修改推送至GitHub
		git push origin master		(推送master分支)
		git push origin dev			(推送dev分支)

7，查看远程库的信息
		git remote		(git remote -v		显示更详细的信息)
			$ git remote -v
			origin  git@github.com:michaelliao/learngit.git (fetch)
			origin  git@github.com:michaelliao/learngit.git (push)
			（如果没有推送权限，就看不到push的地址）

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

8，删除本地仓库与远程仓库的关联（从GitHub迁移到码云）
		git remote rm origin

9，关联多个远程库
	需要在关联时设置不同的远程库名称：
		git remote add github git@github.com:YuYhq/GitTest.git
		git remote add gitee git@gitee.com:YuYhq/GitTest.git


远程仓库---克隆
1，登录GitHub，新建或打开一个远程仓库，找到SSH地址：
		Clone or download 下 Clone with SSH 下 git@github.com:YuYhq/GitTest.git
	
2，在本地新建一个文件夹，在文件夹中打开 Git Bash 
		git clone git@github.com:YuYhq/GitTest.git
	
	除ssh协议外，git还可用https等其他协议：https://github.com/YuYhq/GitTest.git
	https速度慢且每次推送都必须输入口令

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆

3，克隆分支
	克隆完成之后只克隆了主分支，其他分支并未克隆：
	查看本地与远端分支情况: 
		git branch -a
	克隆分支：
		git checkout -b dev(分支名) origin/dev
	分支克隆完成后，不同步文件内同
	获取分支更新内容：
		git pull


分支、分支合并
	master指向最新的提交，再用HEAD指向master
	创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上
	从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变

1，创建、切换分支
	创建dev分支，然后切换到dev分支：
		git checkout -b dev
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
		git branch dev		(创建dev分支)
		git checkout dev	(切换到dev分支)

2，查看当前分支：
		git branch
			* dev
			master
	git branch命令会列出所有分支，当前分支前面会标一个*号

3，合并分支
	在dev分支上提交修改后，checkout切换到master分支，在master分支上看不到dev分支的修改，因为dev分支的修改不会
	影响master分支，需要将dev分支合并到master分支。
	
	git merge命令用于合并指定分支到当前分支：
		git merge dev(dev为分支名称)(Git默认为Fast forward模式)

	禁用Fast forward合并
		git merge --no-ff -m "提交描述" dev

	Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

4，删除分支
		git branch -d dev(dev为分支名称)

5，强制删除一个没有被合并的分支（强制删除分支会丢失修改）
	若分支未被合并，用 git branch -d 删除会报错：
		error: The branch 'feature-vulcan' is not fully merged.
	此时可用
		git branch -D dev(dev为分支名称)	强制删除分支

	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>

6，推送分支
		git push origin master	(推送主分支)
		git push origin dev		(推送dev分支)

7，建立本地分支与远程分支的链接
		git branch --set-upstream-to=origin/dev dev
									(远程分支)	(本地分支)

8，删除远程分支
		git push origin -d dev(dev为分支名称)

9，删除本地的远程分支：
		git branch -r -d origin/dev(dev为分支名称)


冲突处理
	用merge合并分支时，有可能会出现冲突，冲突时merge会提示：Automatic merge failed;
	合并失败后，可用 git status 查看哪些文件冲突
	打开冲突的文件，手动解决冲突，再次 add、commit 进行冲突处理完成后的提交
	
	分支的合并情况：
		git log --graph --pretty=oneline --abbrev-commit



工作现场“储藏”
	当前工作还未完成，无法提交，又有紧急任务需要处理(改bug)
	
	当前工作分支dev：
		git stash
	用git status查看工作区，就是干净的

			切换到需要修改bug的分支master
				checkout master
			从master创建临时分支：
				git checkout -b issue-101
			修复bug......提交：
				add、commit
			修改完成后，切换到master分支，并完成合并，最后删除issue-101分支：
				git checkout master
				git merge --no-ff -m "merged bug fix 101" issue-101

	回到dev分支，继续以前的任务：
		git checkout dev
		git stash list		(查看工作现场)
		git stash pop		(恢复并删除工作现场，相当于下面的两步)
			git stash apply		(恢复工作现场)
			git stash drop来	(删除工作现场)



多人协作的工作模式：
	首先，可以试图用git push origin <branch-name>推送自己的修改；
	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	如果合并有冲突，则解决冲突，并在本地提交；
	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，
	本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


标签管理
	先切换到需要打标签的分支上，再打标签
	
1，在最新的commit上打一个标签
		git tag v1.0

2，在历史commit上打标签
		git log --pretty=oneline --abbrev-commit	(列出历史提交)
		git tag v0.9 f52c633		(在对应commit id 处打标签)

3，创建带有说明的标签
		git tag -a v0.1 -m "version 0.1 released" 1094adb
		用-a指定标签名，-m指定说明文字：

4，查看所有标签
		git tag
			$ git tag
			v0.9
			v1.0
	标签不是按时间顺序列出，而是按字母排序的

5，查看标签信息
		git show v0.9

6，删除标签
		git tag -d v0.1

7，推送某个标签到远程
		git push origin v1.0
	一次性推送全部尚未推送到远程的本地标签：
		git push origin --tags

8，删除远程标签
	先从本地删除：
		git tag -d v0.9
	从远程删除：
		git push origin :refs/tags/v0.9



忽略特殊文件
	在Git工作区的根目录下创建一个特殊的 .gitignore 文件
		从GitHub下载对应语言(C++)的配置文件 https://github.com/github/gitignore
		根据自己的需要组合一下
	把.gitignore也提交到Git，对 .gitignore 做版本管理

1，想添加一个文件到Git，但文件被.gitignore忽略了，可强制添加：
		git add -f App.class
		
2，若是 .gitignore 写错了，可找出到底哪个规则写错了：
		git check-ignore -v App.class



配置别名
1，将 git status 设置为 git st
		git config --global alias.st status

2，每个仓库的Git配置文件都放在.git/config文件中
	别名就在[alias]后面



Git不支持权限管理，但可通过 Gitolite 工具实现
		不要把有限的生命浪费到权限斗争中。。。。。

